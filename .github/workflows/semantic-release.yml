name: Semantic Release

on:
  push:
    branches:
      - release/[0-9]+.[0-9]+
  workflow_dispatch:
    inputs:
      merge_destination:
        description: Branch to merge into (only used when dispatching from develop branch)
        required: false
    branches:
      - develop
      - release/*

jobs:
  release:
    runs-on: ubuntu-latest
    concurrency: release
    permissions:
      id-token: write
      contents: write

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Print next version
        uses: python-semantic-release/python-semantic-release@master
        with:
          root_options: -vv --noop
        id: print

      - name: Create new release branch
        if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/develop' && github.event.inputs.merge_destination == ''
        run: |
          VERSION=${{ steps.print.outputs.version }}
          MAJOR_MINOR_VERSION=$(echo $VERSION | cut -d. -f1,2)
          git show-ref --verify --quiet refs/heads/release/$MAJOR_MINOR_VERSION || git checkout -b release/$MAJOR_MINOR_VERSION
          git push origin HEAD

      - name: Merge changes into existing release branch
        if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/develop' && github.event.inputs.merge_destination != ''
        run: |
          git show-ref --verify --quiet refs/heads/${{ github.event.inputs.merge_destination }} && git checkout ${{ github.event.inputs.merge_destination }}
          git merge --ff-only develop
          git push origin HEAD

      - name: Import GPG key
        run: |
          echo -n "${{ secrets.GPG_PRIVATE_KEY }}" | base64 --decode | gpg --import

      - name: Configure Git for GPG
        run: |
          git config --global user.signingkey ${{ secrets.GPG_KEY_ID }}
          git config --global commit.gpgsign true

      - name: Sync version to .env file
        run: |
          grep -v '^VERSION=' .env > .env.tmp
          mv .env.tmp .env
          echo "VERSION=${{ steps.print.outputs.version }}" >> .env

      - name: Stage .env file
        run: git add .env

      - name: Python Semantic Release
        uses: python-semantic-release/python-semantic-release@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          git-committer-name: Zhang Jia Rong
          git-committer-email: zhang-jia-rong@outlook.com
          prerelease: ${{ !(github.event_name == 'workflow_dispatch' && startsWith(github.ref, 'refs/heads/release/')) }}
        id: semantic

      - name: Promote pre-release to release
        if: github.event_name == 'workflow_dispatch' && startsWith(github.ref, 'refs/heads/release/')
        run: |
          git checkout master
          git merge --ff-only ${{ github.ref }}
          git push origin HEAD:master
          git checkout develop
          git merge --ff-only ${{ github.ref }}
          git push origin HEAD:develop

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ckwing/duospaced-mkdocs-material:${{ steps.semantic.outputs.version }}
